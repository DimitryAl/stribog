package stribog

func KeySchedule(K *[]byte, i int) {

	AddXor512(K, &C[i], K)
	S_transformation(K)
	P_transformation(K)
	L_transformation(K)

}

func Compression_E(K, m, state *[]byte) {

	AddXor512(K, m, state)
	for i := 0; i < 12; i++ {
		S_transformation(state)
		P_transformation(state)
		L_transformation(state)
		KeySchedule(K, i)
		AddXor512(state, K, state)
	}

}

func g_N(N, h, m *[]byte) {

	var t, K []byte

	AddXor512(N, h, &K)
	S_transformation(&K)
	P_transformation(&K)
	L_transformation(&K)
	Compression_E(&K, m, &t)

	AddXor512(&t, h, &t)
	AddXor512(&t, m, h)

}

func hash_X(IV, message, out *[]byte, length uint64) {

	var v512 []byte = []byte{
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00}
	var v0 []byte = []byte{
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
	var Sigma []byte = []byte{
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
	var N []byte = []byte{
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
	var m []byte
	var hash *[]byte = IV
	var len_ = length

	// Stage 2

	for len_ >= 512 {
		// m - последние 512 бит сообщения
		// Не правильно
		for i := 0; i < 64; i++ {
			m[i] = (*message)[i]
		}
		g_N(&N, hash, &m)
		AddModulo512(&N, &v512, &N)
		AddModulo512(&Sigma, &m, &Sigma)
		len_ -= 512
	}

	// Что-то неправильное
	copy(m, []byte{0})
	if len(m) < 64 {
		for j := len(m); j < 63; j++ {
			m[j] = 0
		}
		m[63] = 0x01
	}

	// Stage 3
	m[63-len_/8] |= (1 << (len_ & 0x7))

	g_N(&N, hash, &m)
	// Что-то не странное
	v512[63] = byte(len_) & 0xFF
	v512[62] = byte(len_ / 8)
	AddModulo512(&N, &v512, &N)

	AddModulo512(&Sigma, &m, &Sigma)

	g_N(&v0, hash, &N)
	g_N(&v0, hash, &Sigma)

	for i := 0; i < 64; i++ {
		(*out)[i] = (*hash)[i]
	}
}

func hash_512(message *[]byte, length uint64, out *[]byte) {

	var IV []byte = []byte{
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00}

	hash_X(&IV, message, out, length)
}

func hash_256(message *[]byte, length uint64, out *[]byte) {
	var IV []byte = []byte{
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00}

	var hash []byte

	hash_X(&IV, message, &hash, length)

	for i := 0; i < 32; i++ {
		(*out)[i] = hash[i]
	}
}
